#!/bin/bash

#Configurable Vars
INST=/opt/tools
BANNER="DBX Tools" # Tool Title
REPO="https://github.com/uwbfritz/fr.git" # Repo installation path (change after, ensure install.sh matches)
verbose=1 

# Text colors
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
purple=`tput setaf 5`
teal=`tput setaf 6`
white=`tput setaf 7`
grey=`tput setaf 8`

# Text background colors
bred=`tput setab 1`
bgreen=`tput setab 2`
byellow=`tput setab 3`
bblue=`tput setab 4`
bpurple=`tput setab 5`
bteal=`tput setab 6`
bwhite=`tput setab 7`
bgrey=`tput setab 8`
nc=`tput sgr0`
clear=`tput sgr0`

# Text formatting
uline=`tput smul`
bold=`tput bold`
dim=`tput dim`

# DESC: Handler for unexpected errors
# ARGS: $1 (optional): Exit code (defaults to 1)
# OUTS: None
function script_trap_err() {
    local exit_code=1

    # Disable the error trap handler to prevent potential recursion
    trap - ERR

    # Consider any further errors non-fatal to ensure we run to completion
    set +o errexit
    set +o pipefail

    # Validate any provided exit code
    if [[ ${1-} =~ ^[0-9]+$ ]]; then
        exit_code="$1"
    fi

    # Exit with failure status
    exit "$exit_code"
}

# DESC: Handler for exiting the script
# ARGS: None
# OUTS: None
function script_trap_exit() {
    cd "$orig_cwd"

    # Remove Cron mode script log
    if [[ -n ${cron-} && -f ${script_output-} ]]; then
        rm "$script_output"
    fi

    # Remove script execution lock
    if [[ -d ${script_lock-} ]]; then
        rmdir "$script_lock"
    fi
}

# DESC: Exit script with the given message
# ARGS: $1 (required): Message to print on exit
#       $2 (optional): Exit code (defaults to 0)
# OUTS: None
# NOTE: The convention used in this script for exit codes is:
#       0: Normal exit
#       1: Abnormal exit due to external error
#       2: Abnormal exit due to script error
function script_exit() {
    if [[ $# -eq 1 ]]; then
        printf '%s\n' "$1"
        exit 0
    fi

    if [[ ${2-} =~ ^[0-9]+$ ]]; then
        printf '%b\n' "$1"
        # If we've been provided a non-zero exit code run the error trap
        if [[ $2 -ne 0 ]]; then
            script_trap_err "$2"
        else
            exit 0
        fi
    fi

    script_exit 'Missing required argument to script_exit()!' 2
}

# DESC: Acquire script lock
# ARGS: $1 (optional): Scope of script execution lock (system or user)
# OUTS: $script_lock: Path to the directory indicating we have the script lock
# NOTE: This lock implementation is extremely simple but should be reliable
#       across all platforms. It does *not* support locking a script with
#       symlinks or multiple hardlinks as there's no portable way of doing so.
#       If the lock was acquired it's automatically released on script exit.
function lock_init() {
    local lock_dir
    if [[ $1 = 'system' ]]; then
        lock_dir="/tmp/wds.lock"
    elif [[ $1 = 'user' ]]; then
        lock_dir="/tmp/wds.$UID.lock"
    else
        script_exit 'Missing or invalid argument to lock_init()!' 2
    fi

    if mkdir "$lock_dir" 2> /dev/null; then
        readonly script_lock="$lock_dir"
        echo "Acquired script lock: $script_lock"
    else
        script_exit "Unable to acquire script lock: $lock_dir" 1
    fi
}

# DESC: Check a binary exists in the search path
# ARGS: $1 (required): Name of the binary to test for existence
#       $2 (optional): Set to any value to treat failure as a fatal error
# OUTS: None
function check_binary() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to check_binary()!' 2
    fi

    if ! command -v "$1" > /dev/null 2>&1; then
        if [[ -n ${2-} ]]; then
            script_exit "Missing dependency: Couldn't locate $1." 1
        else
            echo "Missing dependency: $1"
            return 1
        fi
    fi

    echo "Found dependency: $1"
    return 0
}

# DESC: Validate we have superuser access as root (via sudo if requested)
# ARGS: $1 (optional): Set to any value to not attempt root access via sudo
# OUTS: None
function check_superuser() {
    local superuser
    if [[ $EUID -eq 0 ]]; then
        superuser=true
    elif [[ -z ${1-} ]]; then
        if check_binary sudo; then
            echo 'Sudo: Updating cached credentials ...'
            if ! sudo -v; then
                echo "Sudo: Couldn't acquire credentials ..." \
            else
                local test_euid
                test_euid="$(sudo -H -- "$BASH" -c 'printf "%s" "$EUID"')"
                if [[ $test_euid -eq 0 ]]; then
                    superuser=true
                fi
            fi
        fi
    fi

    if [[ -z ${superuser-} ]]; then
        echo 'Unable to acquire superuser credentials.'
        return 1
    fi

    echo 'Successfully acquired superuser credentials.'
    return 0
}

# DESC: Run the requested command as root (via sudo if requested)
# ARGS: $1 (optional): Set to zero to not attempt execution via sudo
#       $@ (required): Passed through for execution as root user
# OUTS: None
function run_as_root() {
    if [[ $# -eq 0 ]]; then
        script_exit 'Missing required argument to run_as_root()!' 2
    fi

    if [[ ${1-} =~ ^0$ ]]; then
        local skip_sudo=true
        shift
    fi

    if [[ $EUID -eq 0 ]]; then
        "$@"
    elif [[ -z ${skip_sudo-} ]]; then
        sudo -H -- "$@"
    else
        script_exit "Unable to run requested command as root: $*" 1
    fi
}

# Generate header
function write_header(){
local h="$@"
echo "####################################################################" | lolcat -t -i
echo " "
echo -e "${uline}${bold}${h}${nc}" | lolcat
echo -e " "
}

function host_info(){
local dnsips=$(sed -e '/^$/d' /etc/resolv.conf | awk '{if (tolower($1)=="nameserver") print $2}')
write_header "Host Information"
echo "${red}${uline}${bold}Hostname:${nc} ${green}$(hostname -s)${nc}"
echo "${red}${uline}${bold}DNS domain:${nc} ${green}$(hostname -d)${nc}"
echo "${red}${uline}${bold}Fully qualified domain name:${nc} ${green}$(hostname -f)${nc}"
echo "${red}${uline}${bold}Network address (IP):${nc} ${green}$(hostname -I | cut -f1 -d' ')${nc}"
echo "${red}${uline}${bold}DNS name servers (DNS IP):${nc} ${green}${dnsips}${nc}"
}

## Process arrays for menu structures

main_menu_from_array() {
  COLUMNS=0
  select item; do
    # Check the selected menu item number
    if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ]; then
      menucontroller "${scriptdirs[$((REPLY - 1))]}"
    else
    exit
    fi
  done
}

menu_from_array() {
  COLUMNS=5
  select item; do
    # Check the selected menu item number
    if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ]; then
      tfile="${scriptfiles[$((REPLY - 1))]}"
      bash "$MSCRIPTS/$tfile"
      menu
    else
      break
    fi
  done
}

# Menu controllers
function menucontroller() {
  export COLUMNS=0
  MSCRIPTS=$INST/scripts/$1
  clear
  figlet -w 100 -l -f $INST/.fonts/3d.flf "$1" | lolcat
  echo ""
  echo ""
  echo ""
  echo "####################################################################" | lolcat -t -i -a
  echo ""
  scriptfiles=($(ls -d ${MSCRIPTS}/*.sh | tr '\n' '\0' | xargs -0 -n 1 basename))
  scriptdesc=()
  for d in "${scriptfiles[@]}"; do
    scriptdesc+=("${green}$(cat $MSCRIPTS/$d | head -2 | tail -1 | cut -c 3-)${nc}")
  done
  menu_from_array "${scriptdesc[@]}"
  menu
}

function menu() {
    export COLUMNS=0
    clear
    echo ""
    echo ""
    figlet -w 100 -l -f $INST/.fonts/3d.flf $BANNER | lolcat -t
    echo ""
    echo ""
    echo ""
    host_info
    echo " "
    echo "####################################################################" | lolcat -t -i -a

    if [ "$EUID" -eq 0 ]
    then
    git -C $INST fetch --quiet
    HEADHASH=$(git -C $INST rev-parse HEAD)
    UPSTREAMHASH=$(git -C $INST rev-parse master@{upstream})

    if [ "$HEADHASH" != "$UPSTREAMHASH" ]
    then
        TGT=$INST
        git -C $TGT reset --hard
        git -C $TGT pull --quiet
        bash $TGT/.reset.sh $TGT
        echo ""
        echo "${yellow}${bred} Tool updated ${nc}"
    fi
    fi
    echo "${teal}"
    scriptdirs=($(ls -d $INST/scripts/* | tr '\n' '\0' | xargs -0 -n 1 basename))
    main_menu_from_array "${teal}${scriptdirs[@]}${nc}"
}